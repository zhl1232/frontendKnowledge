{"version":3,"sources":["webpack:///./src/article/leixing1.md","webpack:///./src/article/leixing2.md","webpack:///./src/App.vue?a29c","webpack:///./src/App.vue","webpack:///src/App.vue","webpack:///src/components/home.vue","webpack:///./src/components/home.vue?429f","webpack:///./src/components/home.vue","webpack:///./src/router/index.js","webpack:///./src/main.js","webpack:///./src/article ^\\.\\/.*\\.md$","webpack:///./src/article/yuyi1.md","webpack:///./src/article/leixing3.md"],"names":["module","exports","selectortype_template_index_0_src_App","render","_h","this","$createElement","_c","_self","attrs","id","_v","staticRenderFns","src_App","__webpack_require__","normalizeComponent","name","ssrContext","home","data","title","dialogVisible","input","children","file","mounted","Chart","mark","computed","compiledMarkdown","marked_default","sanitize","methods","renderMD","a","Renderer","setOptions","renderer","gfm","tables","breaks","pedantic","smartLists","smartypants","myChart","$echarts","init","document","getElementById","that","on","params","console","log","$message","message","type","option","tooltip","trigger","triggerOn","series","top","left","bottom","right","symbolSize","label","normal","position","verticalAlign","align","fontSize","leaves","initialTreeDepth","expandAndCollapse","animationDuration","animationDurationUpdate","hideLoading","setOption","components_home","_vm","staticStyle","height","visible","width","center","update:visible","$event","domProps","innerHTML","_s","staticClass","slot","click","src_components_home","home_normalizeComponent","Vue","use","Router","router","routes","path","component","prototype","echarts","ElementUI","config","productionTip","el","components","App","template","map","./leixing1.md","./leixing2.md","./leixing3.md","./yuyi1.md","webpackContext","req","webpackContextResolve","Error","keys","Object","resolve"],"mappings":"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","file":"static/js/app.01746b485114a10f0407.js","sourcesContent":["module.exports = \"###### ARRON  2019年2月7日\\r\\n\\r\\nJS 中分为七种内置类型，七种内置类型又分为两大类型：基本类型和对象（Object）。\\r\\n\\r\\n## 基本类型\\r\\n基本类型有六种： null，undefined，boolean，number，string，symbol\\r\\n\\r\\n首先我们必须认识到 3 与 new Number(3) 是完全不同的值，它们一个是 Number 类型， 一个是对象类型。\\r\\n\\r\\nNumber、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象，当直接调用时，它们表示强制类型转换。\\r\\n\\r\\nSymbol 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 Symbol 对象的构造器。\\r\\n\\r\\n原始类型存储的都是值，是没有函数可以调用的，比如 undefined.toString() 会抛出错误\\r\\n\\r\\n但为什么 '1'.toString() 是可以使用的。\\r\\n\\r\\n其实是 . 运算符提供了装箱操作，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调用对应对象的方法。在该临时对象调用函数返回函数操作结果后，将该对象丢弃。\\r\\n\\r\\n### 装箱转换\\r\\n\\r\\n每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象，它是类型转换中一种相当重要的种类。\\r\\n\\r\\n前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可以利用一个函数的 call 方法来强迫产生装箱。\\r\\n\\r\\n```\\r\\n    var symbolObject = (function(){ return this; }).call(Symbol(\\\"a\\\"));\\r\\n\\r\\n    console.log(typeof symbolObject); // object\\r\\n    console.log(symbolObject instanceof Symbol); // true\\r\\n    console.log(symbolObject.constructor   Symbol); // true\\r\\n```\\r\\n\\r\\n使用内置的 Object 函数，我们可以在 JavaScript 代码中显式调用装箱能力。\\r\\n\\r\\n```\\r\\n    var symbolObject = Object((Symbol(\\\"a\\\"));\\r\\n\\r\\n    console.log(typeof symbolObject); // object\\r\\n    console.log(symbolObject instanceof Symbol); // true\\r\\n    console.log(symbolObject.constructor   Symbol); // true\\r\\n\\r\\n```\\r\\n每一个装箱对象console.dir的时候，会发现有个  [[PrimitiveValue]]  标记，他会显示该对象内部指向的原始值。\\r\\n\\r\\n每一类对象（包括装箱对象）皆有私有的 Class 属性，这些属性可以用 Object.prototype.toString 获取：\\r\\n```\\r\\n    var symbolObject = Object((Symbol(\\\"a\\\"));\\r\\n\\r\\n    console.log(Object.prototype.toString.call(symbolObject)); //[object Symbol]\\r\\n```\\r\\n在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此 Object.prototype.toString 是可以准确识别对象对应的基本类型的方法，它比 instanceof 更加准确。\\r\\n\\r\\ninstanceof 的判定如果在两个环境下可能会出错。比如网页内嵌iframe。\\r\\n\\r\\n但需要注意的是，call 本身会产生装箱操作，所以判断类型的时候需要配合 typeof 来区分基本类型还是对象类型。\\r\\n\\r\\n### 拆箱转换\\r\\n\\r\\n在 JavaScript 标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换（即，拆箱转换）。\\r\\n```\\r\\n[Symbol.toPrimitive](hint)\\r\\n```\\r\\n如果 hint 是 \\\"string\\\" 或 \\\"default\\\"，[@@toPrimitive]() 将会调用 toString。如果 toString 属性不存在，则调用 valueOf。如果 valueOf 也不存在，则抛出一个TypeError。\\r\\n\\r\\n如果 hint 是 \\\"number\\\"，[@@toPrimitive]() 会首先尝试 valueOf，若失败再尝试 toString。\\r\\n\\r\\nnumber\\r\\n```\\r\\n    var o = {\\r\\n        valueOf : () => {console.log(\\\"valueOf\\\"); return {}},\\r\\n        toString : () => {console.log(\\\"toString\\\"); return {}}\\r\\n    }\\r\\n\\r\\n    o * 2\\r\\n    // valueOf\\r\\n    // toString\\r\\n    // TypeError\\r\\n```\\r\\nstring\\r\\n```\\r\\n    var o = {\\r\\n        valueOf : () => {console.log(\\\"valueOf\\\"); return {}},\\r\\n        toString : () => {console.log(\\\"toString\\\"); return {}}\\r\\n    }\\r\\n\\r\\n    o + \\\"\\\"\\r\\n    // toString\\r\\n    // valueOf\\r\\n    // TypeError\\r\\n```\\r\\n当在希望是字符串操作，也即发生对象到字符串的转换时，传入内部函数 ToPrimitive 的参数值即为 string，当在希望是数值操作，传入内部函数 ToPrimitive 的参数值即为 number，当在一些不确定需要将对象转换成什么基础类型的场景下，传入内部函数 ToPrimitive 的参数值即为 default：\\r\\n```\\r\\nconst b = {\\r\\n    [Symbol.toPrimitive] (hint) {\\r\\n        console.log(`hint: ${hint}`);\\r\\n        return {};\\r\\n    },\\r\\n    toString () {\\r\\n        console.log('toString');\\r\\n        return 1;\\r\\n    },\\r\\n    valueOf () {\\r\\n        console.log('valueOf');\\r\\n        return 2;\\r\\n    }\\r\\n};\\r\\n\\r\\nalert(b); // hint: string \\r\\nb + ''; // hint: default\\r\\nb + 500; // hint: default\\r\\n+b; // hint: number\\r\\nb * 1; // hint: number\\r\\n```\\r\\n在 ES6 之后，还允许对象通过显式指定 @@toPrimitive Symbol 来覆盖原有的行为。\\r\\n\\r\\n```\\r\\n    var o = {\\r\\n        valueOf : () => {console.log(\\\"valueOf\\\"); return {}},\\r\\n        toString : () => {console.log(\\\"toString\\\"); return {}}\\r\\n    }\\r\\n\\r\\n    o[Symbol.toPrimitive] = () => {console.log(\\\"toPrimitive\\\"); return \\\"hello\\\"}\\r\\n\\r\\n\\r\\n    console.log(o + \\\"\\\")\\r\\n    // toPrimitive\\r\\n    // hello\\r\\n```\\r\\n\\r\\n\\r\\n### null和undefined\\r\\n\\r\\nnull代表赋值了，但内容为空，undefined表示未定义。\\r\\n\\r\\n另外对于 null 来说。虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\\r\\n\\r\\n一般建议用 void 0 代替 undefined ，因为在ES5之前undefined 是一个变量，而并非是一个关键字，为了避免无意中被修改，建议用 void 0 代替 undefined\\r\\n```\\r\\n    let a\\r\\n    // 我们也可以这样判断 undefined\\r\\n    a  = undefined\\r\\n    // 但是 undefined 不是保留字，能够在低版本浏览器被赋值\\r\\n    let undefined = 1\\r\\n    // 这样判断就会出错\\r\\n    // 所以可以用下面的方式来判断，并且代码量更少\\r\\n    // 因为 void 后面随便跟上一个组成表达式\\r\\n    // 返回就是 undefined\\r\\n    a  = void 0\\r\\n```\\r\\n\\r\\n### Boolean\\r\\n\\r\\n\\r\\n```\\r\\n    console.log(true  = new Boolean(true));  // false\\r\\n\\r\\n```\\r\\n因为true是基本类型，new Boolean(true)是一个对象\\r\\n\\r\\n### String\\r\\n\\r\\nJavaScript 中的字符串是永远无法变更的，一旦字符串构造出来，无论你在 string 类型上调用何种方法，都不会对值有改变。\\r\\n\\r\\nString 有最大长度是 2^53 - 1，但是这个最大长度并不是你理解的字符数，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。\\r\\n\\r\\n\\r\\n### Number\\r\\n\\r\\nJavaScript 中的 Number 类型有 (2^64 - 2^53+3) 个值。JavaScript 采用 IEEE 754 双精度版本(64位)。\\r\\n\\r\\n> 指数为2^e - 1且尾数的小数部分全0，这个数字是±∞。（符号位决定正负）\\r\\n\\r\\n> 指数为2^e - 1且尾数的小数部分非0，这个数字是NaN。\\r\\n\\r\\n其中NaN，占用了 9007199254740990 位，即（2^53-2）；±∞占用两位。但是表示了三个直观的量。\\r\\n\\r\\nJavaScript中的数字是64-bits的双精度，所以加减一下，一共有(2^64 - 2^53 + 3)个值。\\r\\n\\r\\n64位双精度在计算机中存储占用8字节，64位，有效位数为16位。其中符号位，指数位和尾数部分分别为1, 11, 52。取值范围取决于指数位，计算精度取决于尾数位（小数）。\\r\\n\\r\\n小数位是52位（二进制），换算为十进制则只能百分百能保证15位。超过该精度（二进制52位，十进制15位）的小数运算将会被截取，造成精度损失和计算结果的不准确。\\r\\n\\r\\n```\\r\\n\\tconsole.log( 0.000000000000001 <= Number.EPSILON ); // false\\r\\n\\tconsole.log( 0.0000000000000001 <= Number.EPSILON ); // true\\r\\n\\r\\n```\\r\\n\\r\\n所以JavaScript 提供的最小精度值 Number.EPSILON 为 2.220446049250313e-16 也就是\\r\\n小于16位小数(10进制)。\\r\\n```\\r\\n\\tconsole.log( 2.220446049250313e-16.toString(2) );\\r\\n\\t// 0.0000000000000000000000000000000000000000000000000001\\r\\n\\t// 52位小数(2进制)\\r\\n```\\r\\n\\r\\n##### 为什么0.1 + 0.2 != 0.3\\r\\n计算机计算都是用二进制的。\\r\\n\\r\\n问：要把小数装入计算机，总共分几步？你猜对了，3 步。\\r\\n\\r\\n- 第一步：转换成二进制。\\r\\n- 第二步：用二进制科学计算法表示。\\r\\n- 第三步：表示成 IEEE 754 形式。\\r\\n\\r\\n0.1 二进制计算过程\\r\\n```\\r\\n0.1*2=0.2========取出整数部分0\\r\\n0.2*2=0.4========取出整数部分0 \\r\\n0.4*2=0.8========取出整数部分0 \\r\\n0.8*2=1.6========取出整数部分1 \\r\\n0.6*2=1.2========取出整数部分1　 \\r\\n0.2*2=0.4========取出整数部分0 \\r\\n0.4*2=0.8========取出整数部分0 \\r\\n0.8*2=1.6========取出整数部分1 \\r\\n0.6*2=1.2========取出整数部分1\\r\\n……\\r\\n```\\r\\n得到一个无限循环的二进制小数 0.000110011…\\r\\n\\r\\n用科学计数法表示\\r\\n\\r\\n0.000110011(0011) == 1.100110011(0011)*2^-4  // (0011) 表示循环\\r\\n\\r\\n> 任何一个r进制数N都可以写成（N）r=(+/-)S*r(+/-e)这种科学计数法\\r\\n\\r\\n> 其中N表示需要表示的数，r表示进制，S表示尾数，N的有效位数字，e表示阶码，代表小数点的位置\\r\\n\\r\\n表示成 IEEE 754 形式\\r\\n\\r\\n1. 正数 固符号位为 0\\r\\n2. 尾数 由于由于第一位使用是1，固取(首位1干掉了) .100110011(0011)\\r\\n3. 指数 -4 + 1023(偏移量), 1019 转换为二进制就是 01111111011\\r\\n\\r\\n组合在一起就是 0-01111111011-100110011(0011)\\r\\n\\r\\n因为IEEE 754 64位只能存储 52位尾数，剩下的需要舍入。\\r\\n\\r\\n因此0.1实际存储时的位模式是0-01111111011-1001100110011001100110011001100110011001100110011010；\\r\\n\\r\\n\\r\\n0.2 同理得到0-01111111100-1001100110011001100110011001100110011001100110011010；\\r\\n\\r\\n相加得到0-01111111101-0011001100110011001100110011001100110011001100110100;转换为十进制即为0.30000000000000004。\\r\\n\\r\\n> 单精度32位的 偏移量是 Math.pow(2,8)/2 -1 == 127 ，双精度64位的偏移量是 Math.pow(2,11)/2 -1 == 1023\\r\\n\\r\\n> 因为所有数的二进制科学计数都可以写成1.xxxx，所以是固定的，取消默认1，这样可以多出一位存储空间。\\r\\n\\r\\n##### 其它\\r\\n\\r\\n- 指数域不全为0或不全为1。这时，浮点数就采用上面的规则表示，即指数的计算值减去127（或1023），得到真实值，再将尾数前加上第一位的1。\\r\\n- 指数域全为0。这时，浮点数的指数等于1-127（或者1-1023），尾数不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字。\\r\\n- 指数域全为1。这时，如果尾数全为0，表示±无穷大（正负取决于符号位s）；如果尾数不全为0，表示这个数不是一个数（NaN）。\\r\\n\\r\\n### symbol\\r\\n```\\r\\nvar o = new Object\\r\\n\\r\\no[Symbol.iterator] = function() {\\r\\n    var v = 0\\r\\n    return {\\r\\n        next: function() {\\r\\n            return { value: v++, done: v > 10 }\\r\\n        }\\r\\n    }        \\r\\n};\\r\\n\\r\\nfor(var v of o) \\r\\n    console.log(v); // 0 1 2 3 ... 9\\r\\n```\\r\\n\\r\\n\\r\\n代码中我们定义了 iterator 之后，用 for(var v of o) 就可以调用这个函数，然后我们可以根据函数的行为，产生一个 for…of 的行为。\\r\\n\\r\\n这里我们给对象 o 添加了 Symbol.iterator 属性，并且按照迭代器的要求定义了一个 0 到 10 的迭代器，之后我们就可以在 for of 中愉快地使用这个 o 对象啦。\\r\\n\\r\\n这些标准中被称为“众所周知”的 Symbol，也构成了语言的一类接口形式。它们允许编写与语言结合更紧密的 API。\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/article/leixing1.md\n// module id = 0BSU\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/article/leixing2.md\n// module id = 44Vb\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('h2',[_vm._v(\"用一定的词法和语法,去表达一定语义,最终操作运行时\")]),_vm._v(\" \"),_c('router-view')],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0dc65450\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0dc65450\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0dc65450\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","<template>\n  <div id=\"app\">\n    <h2>用一定的词法和语法,去表达一定语义,最终操作运行时</h2>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","\n<template>\n\t<div>\n  <div id=\"main\" style=\"height:800px;\" >\n  </div>\n\t<el-dialog\n\t\t:title=\"title\"\n\t\t:visible.sync=\"dialogVisible\"\n\t\twidth=\"70%\"\n\t\tcenter>\n\t\t<div v-html=\"compiledMarkdown\"></div>\n\t\t<span slot=\"footer\" class=\"dialog-footer\">\n\t\t\t<el-button @click=\"dialogVisible = false\">取 消</el-button>\n\t\t\t<el-button type=\"primary\" @click=\"dialogVisible = false\">确 定</el-button>\n\t\t</span>\n\t</el-dialog>\n\n\t</div>\n\t\n</template>\n\n<script>\nimport marked from 'marked'\nexport default {\n  data() {\n    return {\n      title: '', // 标题\n      dialogVisible: false, // dialog弹出判定\n      input: '', // 引入md文件名字\n      // 树数据\n      data: {\n        name: '前端知识构架',\n        children: [\n          {\n            name: 'javascript',\n            children: [\n              {\n                name: '运行时',\n                children: [\n                  {\n                    name: '数据结构',\n                    children: [\n                      {\n                        name: '类型',\n                        children: [\n                          {\n                            name: '基本类型',\n                            file: 'leixing1'\n                          },\n                          {\n                            name: '类型转换',\n                            file: 'leixing2'\n                          },\n                          {\n                            name: '对象',\n                            file: 'leixing3'\n                          }\n                        ]\n                      },\n                      {\n                        name: '实例',\n                        children: [\n                          {\n                            name: '应用和机制'\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    name: '执行过程（）',\n                    children: [\n                      { name: '事件循环' },\n                      { name: '做任务的执行' },\n                      { name: '函数的执行' },\n                      { name: '语句级的执行' }\n                    ]\n                  }\n                ]\n              },\n              {\n                name: '文法',\n                children: [\n                  {\n                    name: '词法'\n                    // value: 4116\n                  },\n                  {\n                    name: '语法'\n                  }\n                ]\n              },\n              {\n                name: '语义',\n                children: [\n                  {\n                    name: '语义化标签',\n                    file: 'yuyi1'\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            name: 'HTML&CSS',\n            children: [\n              {\n                name: 'HTML',\n                children: [\n                  {\n                    name: '元素',\n                    children: [\n                      { name: '文档元信息' },\n                      { name: '语义相关内容' },\n                      { name: '链接' },\n                      { name: '替换型元素' },\n                      { name: '表单' },\n                      { name: '表格' },\n                      { name: '总集' }\n                    ]\n                  },\n                  {\n                    name: '语言',\n                    children: [{ name: '实体' }, { name: '命名空间' }]\n                  },\n                  {\n                    name: '补充标准'\n                  }\n                ]\n              },\n              {\n                name: 'CSS',\n                children: [\n                  {\n                    name: '语言',\n                    children: [{ name: '@rule' }, { name: '选择器' }, { name: '单位' }]\n                  },\n                  {\n                    name: '功能',\n                    children: [\n                      {\n                        name: '布局',\n                        children: [{ name: '正常流' }, { name: '弹性布局' }]\n                      },\n                      {\n                        name: '绘制',\n                        children: [{ name: '颜色和形状' }, { name: '文字相关' }]\n                      },\n                      {\n                        name: '交互',\n                        children: [{ name: '动画' }, { name: '其他交互' }]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            name: '浏览器的实现原理和API',\n            children: [\n              {\n                name: '实现原理',\n                children: [\n                  { name: '解析' },\n                  { name: '构建DOM树' },\n                  { name: '计算CSS' },\n                  { name: '渲染、合成和绘制' }\n                ]\n              },\n              {\n                name: 'API',\n                children: [\n                  { name: 'DOM' },\n                  { name: 'CSSOM' },\n                  { name: '事件' },\n                  { name: 'API总集合' }\n                ]\n              }\n            ]\n          },\n          {\n            name: '前端工程实践',\n            children: [\n              { name: '性能' },\n              { name: '工具链' },\n              { name: '持续集成' },\n              { name: '搭建系统' },\n              { name: '架构与基础库' }\n            ]\n          }\n        ]\n      }\n    }\n  },\n  mounted() {\n    this.Chart() //\n    this.mark()\n  },\n  computed: {\n    compiledMarkdown: function() {\n      // markdown渲染计算\n      return marked(this.input, { sanitize: false })\n    }\n  },\n  methods: {\n    mark() {\n      // markdown插件配置\n      let renderMD = new marked.Renderer()\n      marked.setOptions({\n        renderer: renderMD,\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: false, // 忽略任何已经输入的html代码（标签）\n        smartLists: true,\n        smartypants: false\n      })\n    },\n    Chart() {\n      let myChart = this.$echarts.init(document.getElementById('main'))\n      let that = this\n      myChart.on('click', function(params) {\n        if (params.data.children) {\n          // 如果不是最终子节点\n          return\n        } else if (!params.data.file) {\n          // 如果没有文章\n          that.$message({\n            message: '暂时没有相关文章',\n            type: 'warning'\n          })\n        } else {\n          // 树分支末端点击事件\n          that.title = params.name\n          // 根据点击file名字,动态拿markdown文件内容\n          that.input = require(`../article/${params.data.file}.md`)\n          that.dialogVisible = true\n          console.log(that.compiledMarkdown)\n        }\n      })\n      let option = {\n        // 树配置\n        tooltip: {\n          trigger: 'item',\n          triggerOn: 'mousemove'\n        },\n        series: [\n          {\n            type: 'tree',\n\n            data: [this.data],\n\n            top: '1%',\n            left: '10%',\n            bottom: '1%',\n            right: '20%',\n\n            symbolSize: 10,\n\n            label: {\n              normal: {\n                position: 'left',\n                verticalAlign: 'middle',\n                align: 'right',\n                fontSize: 16\n              }\n            },\n\n            leaves: {\n              label: {\n                normal: {\n                  position: 'right',\n                  verticalAlign: 'middle',\n                  align: 'left'\n                }\n              }\n            },\n            initialTreeDepth: 10, // 默认展开深度\n            expandAndCollapse: true,\n            animationDuration: 550,\n            animationDurationUpdate: 750\n          }\n        ]\n      }\n      myChart.hideLoading()\n      myChart.setOption(option)\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh1,\nh2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/home.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticStyle:{\"height\":\"800px\"},attrs:{\"id\":\"main\"}}),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":_vm.title,\"visible\":_vm.dialogVisible,\"width\":\"70%\",\"center\":\"\"},on:{\"update:visible\":function($event){_vm.dialogVisible=$event}}},[_c('div',{domProps:{\"innerHTML\":_vm._s(_vm.compiledMarkdown)}}),_vm._v(\" \"),_c('span',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogVisible = false}}},[_vm._v(\"取 消\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":function($event){_vm.dialogVisible = false}}},[_vm._v(\"确 定\")])],1)])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0105f864\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/home.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0105f864\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./home.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./home.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./home.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0105f864\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./home.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0105f864\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/home.vue\n// module id = null\n// module chunks = ","import Vue from 'vue'\nimport Router from 'vue-router'\nimport home from '@/components/home'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: home\n    }\n  ]\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/router/index.js","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport echarts from 'echarts';\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.prototype.$echarts = echarts; \nVue.use( ElementUI );\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '<App/>'\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","var map = {\n\t\"./leixing1.md\": \"0BSU\",\n\t\"./leixing2.md\": \"44Vb\",\n\t\"./leixing3.md\": \"uJ20\",\n\t\"./yuyi1.md\": \"nx5t\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"geK+\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/article ^\\.\\/.*\\.md$\n// module id = geK+\n// module chunks = 1","module.exports = \"###### ARRON  2019年2月6日\\r\\n\\r\\n### 语义类标签是什么，使用它有什么好处？\\r\\n\\r\\n语义类标签在视觉表现上互相都差不多，主要的区别在于它们表示了不同的语义。\\r\\n\\r\\n语义是我们说话表达的意思，多数的语义实际上都是由文字来承载的。语义类标签则是纯文字的补充，比如标题、自然段、章节、列表，这些内容都是纯文字无法表达的，我们需要依靠语义标签代为表达。\\r\\n\\r\\n#### 正确使用语义标签可以带来很多好处\\r\\n- 语义类标签对开发者更为友好，使用语义类标签增强了可读性，即便是在没有 CSS 的时候，开发者也能够清晰地看出网页的结构，也更为便于团队的开发和维护。\\r\\n- 除了对人类友好之外，语义类标签也十分适宜机器阅读。它的文字表现力丰富，更适合搜索引擎检索（SEO），也可以让搜索引擎爬虫更好地获取到更多有效信息，有效提升网页的搜索量，并且语义类还可以支持读屏软件，根据文章可以自动生成目录等等。\\r\\n\\r\\n### 作为自然语言延伸的语义类标签\\r\\n\\r\\n我们说话并没有唯一的标准措辞，语义标签的使用也是一样。\\r\\n\\r\\n一个好玩的ruby语义标签,如果没有这个标签的话,想实现ruby展示还比较麻烦。\\r\\n\\r\\n```\\r\\n<ruby>\\r\\n  你 <rt>sha</rt>\\r\\n  好 <rt>bi</rt>\\r\\n</ruby>\\r\\n```\\r\\n<ruby>\\r\\n  你 <rt>sha</rt>\\r\\n  好 <rt>bi</rt>\\r\\n</ruby>\\r\\n\\r\\n语义化标签对开发者的友好更多的表现为消除歧义，比如em标签表示重音，强调内容\\r\\n```\\r\\n// 这是一句不带任何强调的句子\\r\\n<p>Cats are cute animals.</p>\\r\\n\\r\\n// em 包围 Cats，强调猫是种可爱的动物，而不是狗或者其他动物\\r\\n<p><em>Cats</em> are cute animals.</p>\\r\\n\\r\\n// em 包围 are，代表句子所说是事实，来反驳那些说猫不可爱的人\\r\\n<p>Cats <em>are</em> cute animals.</p>\\r\\n\\r\\n// em 包围 cute，强调猫是一种可爱的动物，而不是有人说的刻薄、讨厌的动物\\r\\n<p>Cats are <em>cute</em> animals.</p>\\r\\n\\r\\n// 这里强调猫是动物，而不是植物\\r\\n<p>Cats are cute <em>animals</em>.</p>\\r\\n\\r\\n```\\r\\n\\r\\n而strong表示着重内容，代表内容的强烈的重要性、严重性或者紧急性。\\r\\n```\\r\\n// 章节序号不重要，章节的名字才重要\\r\\n<h1>Chapter 1: <strong>The Praxis</strong></h1>\\r\\n```\\r\\n\\r\\n><h1>Chapter 1: <strong>The Praxis</strong></h1>\\r\\n\\r\\n### 作为标题摘要的语义类标签\\r\\n\\r\\nh1-h6 是最基本的标题，它们表示了文章中不同层级的标题。有些时候，我们会有副标题，为了避免副标题产生额外的一个层级，我们使用 hgroup 标签。\\r\\n```\\r\\n<h1>JavaScript 对象</h1>\\r\\n<h2> 我们需要模拟类吗？</h2>\\r\\n<p>balah balah</p>\\r\\n```\\r\\n```\\r\\n<hgroup>\\r\\n<h1>JavaScript 对象 </h1>\\r\\n<h2> 我们需要模拟类吗？</h2>\\r\\n</hgroup>\\r\\n<p>balah balah</p>\\r\\n```\\r\\n\\r\\n### 作为整体结构的语义类标签\\r\\n\\r\\n最后一个场景是，随着越来越多的浏览器推出“阅读模式”，以及各种非浏览器终端的出现，语义化的 HTML 适合机器阅读的特性变得越来越重要。\\r\\n\\r\\n应用了语义化结构的页面，可以明确地提示出页面信息的主次关系，它能让浏览器很好地支持“阅读视图功能”，还可以让搜索引擎的命中率提升，同时，它也对视障用户的读屏软件更友好。\\r\\n\\r\\n```\\r\\n<body>\\r\\n    <header>\\r\\n        <nav>\\r\\n            ……\\r\\n        </nav>\\r\\n    </header>\\r\\n    <aside>\\r\\n        <nav>\\r\\n            ……\\r\\n        </nav>\\r\\n    </aside>\\r\\n    <section>……</section>\\r\\n    <section>……</section>\\r\\n    <section>……</section>\\r\\n    <footer>\\r\\n        <address>……</address>\\r\\n    </footer>\\r\\n</body>\\r\\n```\\r\\n一个典型的场景是多篇新闻展示在同一个新闻专题页面中，这种类似报纸的多文章结构适合用 article 来组织。\\r\\n```\\r\\n<body>\\r\\n    <header>……</header>\\r\\n    <article>\\r\\n        <header>……</header>\\r\\n        <section>……</section>\\r\\n        <section>……</section>\\r\\n        <section>……</section>\\r\\n        <footer>……</footer>\\r\\n    </article>\\r\\n    <article>\\r\\n        ……\\r\\n    </article>\\r\\n    <article>\\r\\n        ……\\r\\n    </article>\\r\\n    <footer>\\r\\n        <address></address>\\r\\n    </footer>\\r\\n</body>\\r\\n```\\r\\nbody 里面有自己的 header 和 footer，然后里面是竖篇的 article，每一个 article 里面都有自己的 header、section、footer。这是一个典型的多文章结构。\\r\\n\\r\\n最后 footer 中包含 address，这是个非常容易被误用的标签。address 并非像 date 一样，表示一个给机器阅读的地址，而是表示“文章（作者）的联系方式”，address 明确地只关联到 article 和 body。\\r\\n\\r\\n### 总结\\r\\n\\r\\n至此，我们可以回答是否要语义化的问题：我们应该分开一些场景来看语义，把它用在合适的场景下，可以获得额外的效果。本篇文中，我们至少涉及了三个明确的场景：\\r\\n\\r\\n- 自然语言表达能力的补充；\\r\\n- 文章标题摘要；\\r\\n- 适合机器阅读的整体结构。\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/article/yuyi1.md\n// module id = nx5t\n// module chunks = 1","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/article/leixing3.md\n// module id = uJ20\n// module chunks = 1"],"sourceRoot":""}